{
  "service": {
    "service": "lib-poc-service",
    "serviceObject": {
      "name": "lib-poc-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "lambdaHashingVersion": "20201221",
      "stage": "dev",
      "region": "ap-northeast-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ConditionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-condition"
            }
          },
          "SaveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-save"
            }
          },
          "GraphLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-graph"
            }
          },
          "GraphUnderscoredayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-graph_day"
            }
          },
          "GraphUnderscoremonthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-graph_month"
            }
          },
          "SetUnderscorelicesenceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-set_licesence"
            }
          },
          "GetUnderscorelicesenceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-get_licesence"
            }
          },
          "DeleteUnderscorelicenseLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-delete_license"
            }
          },
          "GetUnderscoreuserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-get_user"
            }
          },
          "UpdateUnderscoreuserUnderscoreconfirmLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-update_user_confirm"
            }
          },
          "RegistUnderscoreuserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-regist_user"
            }
          },
          "GetUnderscorestaffLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-get_staff"
            }
          },
          "UpdateUnderscorestaffUnderscoreconfirmLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-update_staff_confirm"
            }
          },
          "RegistUnderscorestaffLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lib-poc-service-dev-regist_staff"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "lib-poc-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lib-poc-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lib-poc-service-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "lib-poc-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ConditionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "condition.condition",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-condition",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConditionLogGroup"
            ]
          },
          "SaveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "condition.save",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-save",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveLogGroup"
            ]
          },
          "GraphLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "condition.graph",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-graph",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GraphLogGroup"
            ]
          },
          "GraphUnderscoredayLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "condition.graph_day",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-graph_day",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GraphUnderscoredayLogGroup"
            ]
          },
          "GraphUnderscoremonthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "condition.graph_month",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-graph_month",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GraphUnderscoremonthLogGroup"
            ]
          },
          "SetUnderscorelicesenceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "license.set",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-set_licesence",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SetUnderscorelicesenceLogGroup"
            ]
          },
          "GetUnderscorelicesenceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "license.get",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-get_licesence",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUnderscorelicesenceLogGroup"
            ]
          },
          "DeleteUnderscorelicenseLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "license.delete",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-delete_license",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUnderscorelicenseLogGroup"
            ]
          },
          "GetUnderscoreuserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "user.get",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-get_user",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUnderscoreuserLogGroup"
            ]
          },
          "UpdateUnderscoreuserUnderscoreconfirmLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "user.update_confirm",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-update_user_confirm",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUnderscoreuserUnderscoreconfirmLogGroup"
            ]
          },
          "RegistUnderscoreuserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "user.regist_user",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-regist_user",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegistUnderscoreuserLogGroup"
            ]
          },
          "GetUnderscorestaffLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "staff.get",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-get_staff",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUnderscorestaffLogGroup"
            ]
          },
          "UpdateUnderscorestaffUnderscoreconfirmLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "staff.update_confirm",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-update_staff_confirm",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUnderscorestaffUnderscoreconfirmLogGroup"
            ]
          },
          "RegistUnderscorestaffLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z/lib-poc-service.zip"
              },
              "Handler": "staff.regist_user",
              "Runtime": "nodejs14.x",
              "FunctionName": "lib-poc-service-dev-regist_staff",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegistUnderscorestaffLogGroup"
            ]
          },
          "ConditionLambdaVersionIzHbHH5vDO6PShv1Ce9ki7ddlqE7RCoh68M0qYfZM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConditionLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "SaveLambdaVersionHVWm1p05ylxul6iqnO4SuotORmuss9Xsq9CJVznzEX0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "GraphLambdaVersionDl5efTnuExaGvJPPdjyyNIi9PVqbwaibhtYuW0QPdY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GraphLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "GraphUnderscoredayLambdaVersion0iwQ1GyCiVO54WG4Zbrq2ry8Ti2RD2h3dflOVhYctQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GraphUnderscoredayLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "GraphUnderscoremonthLambdaVersion79QIicPSCFRIerdYKmHvoMFiB0fCFw3w41nOdONOM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GraphUnderscoremonthLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "SetUnderscorelicesenceLambdaVersionFdqQLcYiuCOfNVOkiUuyFXUhURfP650We0DRzcY1wg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SetUnderscorelicesenceLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "GetUnderscorelicesenceLambdaVersion4n06WniE3lPM4dEeTDPsX26ZRh7Zuky1uVXGjwtolA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUnderscorelicesenceLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "DeleteUnderscorelicenseLambdaVersiontCeCtnrtXciE484WPRvWkpuvR6gS71zHQfcB2WD3wY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUnderscorelicenseLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "GetUnderscoreuserLambdaVersionEs565Lq9xxblw9XbqwD30ZCsDhaupc1KcZfINgie3c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUnderscoreuserLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "UpdateUnderscoreuserUnderscoreconfirmLambdaVersionK5owUAKuRfSg4Kh4m2vEuhADfUNuWcyfZO5Xk3REM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUnderscoreuserUnderscoreconfirmLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "RegistUnderscoreuserLambdaVersionxYoQ6RilenrSqw98qqQvKo3OCAfiQSXkebP0fW4wbM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegistUnderscoreuserLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "GetUnderscorestaffLambdaVersionYvjvE3Y8AflHnQJKdVdaCKY5xETI5m7pwJaMimlU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUnderscorestaffLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "UpdateUnderscorestaffUnderscoreconfirmLambdaVersionjCTZZh6yo5ouziBeQHG13vzbUyML79tNwK2ubuXhu3o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUnderscorestaffUnderscoreconfirmLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "RegistUnderscorestaffLambdaVersionlhDfZFqoqIYGNZEoXhornUPiFdYvOP0E8P3HtXxY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegistUnderscorestaffLambdaFunction"
              },
              "CodeSha256": "KYTTsdIBRHR/mdTr/n05PWccs49K4wTh9YDKNTi1JAA="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-lib-poc-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceCondition": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "condition",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceConditionSave": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCondition"
              },
              "PathPart": "save",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGraph": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "graph",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGraphday": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "graph_day",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGraphmonth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "graph_month",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLicense": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "license",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserConfirm": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "confirm",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserRegist": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "regist",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceStaff": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "staff",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceStaffConfirm": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceStaff"
              },
              "PathPart": "confirm",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceStaffRegist": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceStaff"
              },
              "PathPart": "regist",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodConditionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCondition"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ConditionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ConditionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodConditionSavePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceConditionSave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SaveLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SaveLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGraphGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGraph"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GraphLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GraphLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGraphdayGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGraphday"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GraphUnderscoredayLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GraphUnderscoredayLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGraphmonthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGraphmonth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GraphUnderscoremonthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GraphUnderscoremonthLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLicensePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLicense"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SetUnderscorelicesenceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SetUnderscorelicesenceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLicenseGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLicense"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUnderscorelicesenceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUnderscorelicesenceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLicenseDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLicense"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUnderscorelicenseLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteUnderscorelicenseLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUnderscoreuserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUnderscoreuserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserConfirmPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserConfirm"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUnderscoreuserUnderscoreconfirmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUnderscoreuserUnderscoreconfirmLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserRegistPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserRegist"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegistUnderscoreuserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegistUnderscoreuserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodStaffGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStaff"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUnderscorestaffLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUnderscorestaffLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodStaffConfirmPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStaffConfirm"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUnderscorestaffUnderscoreconfirmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUnderscorestaffUnderscoreconfirmLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodStaffRegistPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStaffRegist"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegistUnderscorestaffLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegistUnderscorestaffLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1638928008641": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodConditionGet",
              "ApiGatewayMethodConditionSavePost",
              "ApiGatewayMethodGraphGet",
              "ApiGatewayMethodGraphdayGet",
              "ApiGatewayMethodGraphmonthGet",
              "ApiGatewayMethodLicensePost",
              "ApiGatewayMethodLicenseGet",
              "ApiGatewayMethodLicenseDelete",
              "ApiGatewayMethodUserGet",
              "ApiGatewayMethodUserConfirmPost",
              "ApiGatewayMethodUserRegistPost",
              "ApiGatewayMethodStaffGet",
              "ApiGatewayMethodStaffConfirmPost",
              "ApiGatewayMethodStaffRegistPost"
            ]
          },
          "ConditionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConditionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SaveLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GraphLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GraphLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GraphUnderscoredayLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GraphUnderscoredayLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GraphUnderscoremonthLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GraphUnderscoremonthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SetUnderscorelicesenceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SetUnderscorelicesenceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUnderscorelicesenceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUnderscorelicesenceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUnderscorelicenseLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUnderscorelicenseLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUnderscoreuserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUnderscoreuserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUnderscoreuserUnderscoreconfirmLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUnderscoreuserUnderscoreconfirmLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegistUnderscoreuserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegistUnderscoreuserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUnderscorestaffLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUnderscorestaffLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUnderscorestaffUnderscoreconfirmLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUnderscorestaffUnderscoreconfirmLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegistUnderscorestaffLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegistUnderscorestaffLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "ConditionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConditionLambdaVersionIzHbHH5vDO6PShv1Ce9ki7ddlqE7RCoh68M0qYfZM"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-ConditionLambdaFunctionQualifiedArn"
            }
          },
          "SaveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveLambdaVersionHVWm1p05ylxul6iqnO4SuotORmuss9Xsq9CJVznzEX0"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-SaveLambdaFunctionQualifiedArn"
            }
          },
          "GraphLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GraphLambdaVersionDl5efTnuExaGvJPPdjyyNIi9PVqbwaibhtYuW0QPdY"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-GraphLambdaFunctionQualifiedArn"
            }
          },
          "GraphUnderscoredayLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GraphUnderscoredayLambdaVersion0iwQ1GyCiVO54WG4Zbrq2ry8Ti2RD2h3dflOVhYctQ"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-GraphUnderscoredayLambdaFunctionQualifiedArn"
            }
          },
          "GraphUnderscoremonthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GraphUnderscoremonthLambdaVersion79QIicPSCFRIerdYKmHvoMFiB0fCFw3w41nOdONOM"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-GraphUnderscoremonthLambdaFunctionQualifiedArn"
            }
          },
          "SetUnderscorelicesenceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SetUnderscorelicesenceLambdaVersionFdqQLcYiuCOfNVOkiUuyFXUhURfP650We0DRzcY1wg"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-SetUnderscorelicesenceLambdaFunctionQualifiedArn"
            }
          },
          "GetUnderscorelicesenceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUnderscorelicesenceLambdaVersion4n06WniE3lPM4dEeTDPsX26ZRh7Zuky1uVXGjwtolA"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-GetUnderscorelicesenceLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUnderscorelicenseLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUnderscorelicenseLambdaVersiontCeCtnrtXciE484WPRvWkpuvR6gS71zHQfcB2WD3wY"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-DeleteUnderscorelicenseLambdaFunctionQualifiedArn"
            }
          },
          "GetUnderscoreuserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUnderscoreuserLambdaVersionEs565Lq9xxblw9XbqwD30ZCsDhaupc1KcZfINgie3c"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-GetUnderscoreuserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUnderscoreuserUnderscoreconfirmLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUnderscoreuserUnderscoreconfirmLambdaVersionK5owUAKuRfSg4Kh4m2vEuhADfUNuWcyfZO5Xk3REM"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-UpdateUnderscoreuserUnderscoreconfirmLambdaFunctionQualifiedArn"
            }
          },
          "RegistUnderscoreuserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegistUnderscoreuserLambdaVersionxYoQ6RilenrSqw98qqQvKo3OCAfiQSXkebP0fW4wbM"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-RegistUnderscoreuserLambdaFunctionQualifiedArn"
            }
          },
          "GetUnderscorestaffLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUnderscorestaffLambdaVersionYvjvE3Y8AflHnQJKdVdaCKY5xETI5m7pwJaMimlU"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-GetUnderscorestaffLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUnderscorestaffUnderscoreconfirmLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUnderscorestaffUnderscoreconfirmLambdaVersionjCTZZh6yo5ouziBeQHG13vzbUyML79tNwK2ubuXhu3o"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-UpdateUnderscorestaffUnderscoreconfirmLambdaFunctionQualifiedArn"
            }
          },
          "RegistUnderscorestaffLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegistUnderscorestaffLambdaVersionlhDfZFqoqIYGNZEoXhornUPiFdYvOP0E8P3HtXxY"
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-RegistUnderscorestaffLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-lib-poc-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "condition": {
        "handler": "condition.condition",
        "events": [
          {
            "http": {
              "path": "condition",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-condition",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ConditionLambdaVersionIzHbHH5vDO6PShv1Ce9ki7ddlqE7RCoh68M0qYfZM"
      },
      "save": {
        "handler": "condition.save",
        "events": [
          {
            "http": {
              "path": "condition/save",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-save",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SaveLambdaVersionHVWm1p05ylxul6iqnO4SuotORmuss9Xsq9CJVznzEX0"
      },
      "graph": {
        "handler": "condition.graph",
        "events": [
          {
            "http": {
              "path": "graph",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-graph",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GraphLambdaVersionDl5efTnuExaGvJPPdjyyNIi9PVqbwaibhtYuW0QPdY"
      },
      "graph_day": {
        "handler": "condition.graph_day",
        "events": [
          {
            "http": {
              "path": "graph_day",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-graph_day",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GraphUnderscoredayLambdaVersion0iwQ1GyCiVO54WG4Zbrq2ry8Ti2RD2h3dflOVhYctQ"
      },
      "graph_month": {
        "handler": "condition.graph_month",
        "events": [
          {
            "http": {
              "path": "graph_month",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-graph_month",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GraphUnderscoremonthLambdaVersion79QIicPSCFRIerdYKmHvoMFiB0fCFw3w41nOdONOM"
      },
      "set_licesence": {
        "handler": "license.set",
        "events": [
          {
            "http": {
              "path": "license",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-set_licesence",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SetUnderscorelicesenceLambdaVersionFdqQLcYiuCOfNVOkiUuyFXUhURfP650We0DRzcY1wg"
      },
      "get_licesence": {
        "handler": "license.get",
        "events": [
          {
            "http": {
              "path": "license",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-get_licesence",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUnderscorelicesenceLambdaVersion4n06WniE3lPM4dEeTDPsX26ZRh7Zuky1uVXGjwtolA"
      },
      "delete_license": {
        "handler": "license.delete",
        "events": [
          {
            "http": {
              "path": "license",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-delete_license",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteUnderscorelicenseLambdaVersiontCeCtnrtXciE484WPRvWkpuvR6gS71zHQfcB2WD3wY"
      },
      "get_user": {
        "handler": "user.get",
        "events": [
          {
            "http": {
              "path": "user",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-get_user",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUnderscoreuserLambdaVersionEs565Lq9xxblw9XbqwD30ZCsDhaupc1KcZfINgie3c"
      },
      "update_user_confirm": {
        "handler": "user.update_confirm",
        "events": [
          {
            "http": {
              "path": "user/confirm",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-update_user_confirm",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateUnderscoreuserUnderscoreconfirmLambdaVersionK5owUAKuRfSg4Kh4m2vEuhADfUNuWcyfZO5Xk3REM"
      },
      "regist_user": {
        "handler": "user.regist_user",
        "events": [
          {
            "http": {
              "path": "user/regist",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-regist_user",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "RegistUnderscoreuserLambdaVersionxYoQ6RilenrSqw98qqQvKo3OCAfiQSXkebP0fW4wbM"
      },
      "get_staff": {
        "handler": "staff.get",
        "events": [
          {
            "http": {
              "path": "staff",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-get_staff",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUnderscorestaffLambdaVersionYvjvE3Y8AflHnQJKdVdaCKY5xETI5m7pwJaMimlU"
      },
      "update_staff_confirm": {
        "handler": "staff.update_confirm",
        "events": [
          {
            "http": {
              "path": "staff/confirm",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-update_staff_confirm",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateUnderscorestaffUnderscoreconfirmLambdaVersionjCTZZh6yo5ouziBeQHG13vzbUyML79tNwK2ubuXhu3o"
      },
      "regist_staff": {
        "handler": "staff.regist_user",
        "events": [
          {
            "http": {
              "path": "staff/regist",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lib-poc-service-dev-regist_staff",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "RegistUnderscorestaffLambdaVersionlhDfZFqoqIYGNZEoXhornUPiFdYvOP0E8P3HtXxY"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "role": "arn:aws:iam::607744718335:role/lambda-vpc-role",
      "vpc": {
        "securityGroupIds": [
          "sg-0610a74cdacaa1317"
        ],
        "subnetIds": [
          "subnet-0f1d9c67b6545ea0c",
          "subnet-02514f3bfc1c375f7",
          "subnet-05bb8af27af44439a"
        ]
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\tjg22983\\dev\\0701_LIB\\aws_test\\sls_local_test\\.serverless\\lib-poc-service.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/lib-poc-service/dev/1638928013983-2021-12-08T01:46:53.983Z",
    "artifact": "lib-poc-service.zip"
  }
}