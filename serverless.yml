# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lib-poc-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-offline

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221

  # you can overwrite defaults here
  stage: dev
  region: ap-northeast-1

# ロールの付与
# ・RDS接続用：lambda-vpc-role
role: 'arn:aws:iam::607744718335:role/lambda-vpc-role'

# VPCの設定
vpc:
  securityGroupIds:
    - sg-0610a74cdacaa1317
  subnetIds:
    - subnet-0f1d9c67b6545ea0c
    - subnet-02514f3bfc1c375f7
    - subnet-05bb8af27af44439a

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  condition:
    handler: condition.condition
    events:
      - http:
          path: condition
          method: get
  save:
    handler: condition.save
    events:
      - http:
          path: condition/save
          method: post
  get_csv:
    handler: condition.get_csv
    events:
      - http:
          path: condition/csv
          method: get
  graph:
    handler: condition.graph
    events:
      - http:
          path: graph
          method: get
  graph_day:
    handler: condition.graph_day
    events:
      - http:
          path: graph_day
          method: get
  graph_month:
    handler: condition.graph_month
    events:
      - http:
          path: graph_month
          method: get
  set_licesence:
    handler: license.set
    events:
      - http:
          path: license
          method: post
  get_licesence:
    handler: license.get
    events:
      - http:
          path: license
          method: get
  delete_license:
    handler: license.delete
    events:
      - http:
          path: license
          method: delete
  get_user:
    handler: user.get
    events:
      - http:
          path: user
          method: get
  update_user_confirm:
    handler: user.update_confirm
    events:
      - http:
          path: user/confirm
          method: post
  regist_user:
    handler: user.regist_user
    events:
      - http:
          path: user/regist
          method: post
  get_staff:
    handler: staff.get
    events:
      - http:
          path: staff
          method: get
  update_staff_confirm:
    handler: staff.update_confirm
    events:
      - http:
          path: staff/confirm
          method: post
  regist_staff:
    handler: staff.regist_user
    events:
      - http:
          path: staff/regist
          method: post
  get_log:
    handler: log.get
    events:
      - http:
          path: log
          method: get
  set_log:
    handler: log.set
    events:
      - http:
          path: log/regist
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
